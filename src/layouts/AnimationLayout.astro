---
import Layout from './Layout.astro';
import { type CollectionEntry } from 'astro:content';

interface Props {
  animation: CollectionEntry<'animations'>;
}

const { animation } = Astro.props;
const { title, category, tags, difficulty } = animation.data;

// カテゴリーに基づいたパス
const categoryPath = `/categories/${category.toLowerCase().replace(/\s+/g, '-')}`;

// 難易度に基づいたバッジクラス
const difficultyClasses = {
  beginner: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400',
  intermediate: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400',
  advanced: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400',
};

const difficultyClass = difficulty ? difficultyClasses[difficulty] : '';

const description = `${category}の${title}のページ`;
---

<Layout title={title} description={description}>
  <div class="max-w-4xl mx-auto">
    <nav class="flex mb-6 text-sm text-gray-600 dark:text-gray-400">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href="/" class="inline-flex items-center hover:text-indigo-600 dark:hover:text-indigo-400">
            <svg class="w-3 h-3 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
            </svg>
            ホーム
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <a href="/categories" class="ml-1 hover:text-indigo-600 dark:hover:text-indigo-400">カテゴリ</a>
          </div>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <a href={categoryPath} class="ml-1 hover:text-indigo-600 dark:hover:text-indigo-400">{category}</a>
          </div>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <span class="ml-1 font-medium text-gray-800 dark:text-gray-300">{title}</span>
          </div>
        </li>
      </ol>
    </nav>

    <article class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <header class="p-6 border-b border-gray-200 dark:border-gray-700">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{title}</h1>
        <p class="text-gray-600 dark:text-gray-400 mb-4">{description}</p>
        
        <div class="flex flex-wrap gap-2 items-center">
          {difficulty && (
            <span class={`text-xs font-medium px-2.5 py-0.5 rounded ${difficultyClass}`}>
              {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
            </span>
          )}
          
          {tags && tags.map(tag => (
            <span class="text-xs font-medium px-2.5 py-0.5 rounded bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
              {tag}
            </span>
          ))}
        </div>
      </header>
      
      <div class="p-6">
        <slot />
      </div>
    </article>
  </div>
</Layout>
