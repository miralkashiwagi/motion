---
import {type CollectionEntry} from 'astro:content';
import PlaceholderImage from './PlaceholderImage.astro';
import {categoryMapping} from '../content/config';
import fs from 'fs/promises';



interface Props {
  animation: CollectionEntry<'animations'>;
}

const {animation} = Astro.props;
const {title, parentCategory, category, difficulty, preview} = animation.data;
const {slug} = animation;

// 難易度に基づいたバッジクラス
const difficultyClasses = {
  beginner: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
  intermediate: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
  advanced: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
};

const difficultyClass = difficulty && difficultyClasses[difficulty] ? difficultyClasses[difficulty] : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';

// 難易度のラベル
const difficultyLabels = {
  beginner: '初級',
  intermediate: '中級',
  advanced: '上級'
};

// 親カテゴリーの色を取得
const getParentCategoryColor = (cat: string) => {
  if (!cat) return '#6b7280'; // デフォルト色
  return categoryMapping[cat as keyof typeof categoryMapping]?.color || '#6b7280';
};

// PreviewURL
let PreviewPath = `/images/animations/${slug.replace(/^\/+/, '')}.gif`;
if (preview) {
  PreviewPath = preview;
}
const PreviewURL = `${import.meta.env.BASE_URL}${PreviewPath}`

//PreviewURL にファイルが存在するか？
// ファイルが存在するかチェック
let isPreviewExist = false;
try {
  await fs.access(`./public${PreviewPath}`); // ファイルにアクセスできるか確認
  isPreviewExist = true; // 存在する場合
} catch {
  isPreviewExist = false; // 存在しない場合
}




// カードのURL生成
const cardUrl = `${import.meta.env.BASE_URL}/animations/${slug.replace(/^\/+/, '')}`;

// カテゴリーIDの取得（カテゴリーページへのリンク用）
const categoryId = parentCategory && categoryMapping[parentCategory as keyof typeof categoryMapping] ? categoryMapping[parentCategory as keyof typeof categoryMapping].id : '';
---

<a href={cardUrl} class="js-unfreeze group">
  <div
    class="bg-white h-full dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 focus-within:ring-2 focus-within:ring-indigo-500">
    <div class="aspect-video relative overflow-hidden bg-gray-100 dark:bg-gray-900">
      {isPreviewExist ? (
        <img src={PreviewURL} alt={title} class="freezeframe object-cover w-full h-full" width="600" height="300"
             loading="lazy"/>
      ) : (
        <PlaceholderImage
          text={title}
          className="w-full h-full"
          bgColor={getParentCategoryColor(parentCategory)}
        />
      )}
      <div class="absolute z-10 top-2 right-2 flex flex-col gap-1 items-end">
        <span class={`text-xs font-medium px-2.5 py-0 rounded ${difficultyClass}`}>
          {difficulty && difficultyLabels[difficulty] ? difficultyLabels[difficulty] : '未分類'}
        </span>
      </div>
    </div>
    <div class="p-3">
      <div class="flex flex-wrap gap-2 mb-2">
        {categoryId && (
          <span
            class="inline-block px-2 py-1 text-xs font-medium rounded-md text-white"
            style=`background-color:${getParentCategoryColor(parentCategory)}`>
            {parentCategory}
          </span>
        )}
        {category && (
          <span
            class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 rounded-md">
            {category}
          </span>
        )}
      </div>
      <h3
        class="text-lg font-semibold text-gray-900 dark:text-white group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors">
        {title}
      </h3>
    </div>
  </div>
</a>

<!-- Freezeframeを有効にするためのスクリプト -->
<script>
  import Freezeframe from 'freezeframe';

  // 全てのカードに対して初期化
  document.querySelectorAll('.js-unfreeze').forEach((card) => {
    const gifImage = card.querySelector('.freezeframe');

    if (gifImage) {
      // freezeframeのインスタンスを作成（特定の要素でのみ動作）
      const freezeframeInstance = new Freezeframe(gifImage);
      freezeframeInstance.start();

      // ホバーイベントを設定
      card.addEventListener('mouseenter', () => {
        freezeframeInstance.start();
      });

      card.addEventListener('mouseleave', () => {
        freezeframeInstance.stop();
      });
    }
  });


</script>
