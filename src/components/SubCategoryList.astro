---
// SubCategoryList.astro
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getSubcategories, CategoryId } from '../utils/categoryUtils';
import { categoryMapping } from '../content/config';

interface Props {
  category: CategoryId;
}

const { category } = Astro.props;

// サブカテゴリー情報を取得
const subcategories = getSubcategories(category);

// すべてのアニメーションを取得
const allAnimations: CollectionEntry<'animations'>[] = await getCollection('animations');

// 親カテゴリー名を取得（カテゴリーIDから逆引き）
const parentCategoryName = Object.entries(categoryMapping).find(([_, data]) => data.id === category)?.[0] || '';

// カテゴリに基づいてアニメーションをフィルタリング
const categoryAnimations = allAnimations.filter(animation => 
  animation.data.parentCategory === parentCategoryName
);

// サブカテゴリーごとにアニメーション数をカウント
const subcategoryWithCounts = subcategories.map(subcategory => {
  const count = categoryAnimations.filter(animation => 
    animation.data.category === subcategory.name
  ).length;
  
  return {
    ...subcategory,
    count
  };
});
---

{subcategoryWithCounts.length > 0 && (
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    {subcategoryWithCounts.map((subcategory) => (
      <a 
        href={`#${subcategory.id}`}
        class="p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
      >
        <div class="flex justify-between items-start">
          <h3 class="font-medium text-lg">{subcategory.name}</h3>
          <span class="inline-flex items-center justify-center w-6 h-6 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs font-medium rounded-full">
            {subcategory.count}
          </span>
        </div>
        {subcategory.description && (
          <p class="text-gray-600 dark:text-gray-400 text-sm mt-1">{subcategory.description}</p>
        )}
      </a>
    ))}
  </div>
)}
