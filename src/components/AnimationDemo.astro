---
interface Props {
  title: string;
  description?: string;
  height?: string;
  controls?: boolean;
}

const { 
  title, 
  description, 
  height = 'auto', 
  controls = true 
} = Astro.props;
---

<div class="animation-demo my-8 bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
  <div class="p-4 border-b border-gray-200 dark:border-gray-700">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{title}</h3>
    {description && <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">{description}</p>}
  </div>
  
  <div class="demo-container relative" style={`min-height: ${height};`}>
    <div class="demo-content p-6">
      <slot />
    </div>
    
    {controls && (
      <div class="demo-controls absolute bottom-0 right-0 p-2 bg-gray-100 dark:bg-gray-900 rounded-tl-md border-t border-l border-gray-200 dark:border-gray-700">
        <button id="reset-demo" class="text-xs px-2 py-1 bg-indigo-100 hover:bg-indigo-200 dark:bg-indigo-900/30 dark:hover:bg-indigo-800/50 text-indigo-700 dark:text-indigo-400 rounded">
          リセット
        </button>
      </div>
    )}
  </div>
</div>

<script>
  // デモのリセット機能
  document.addEventListener('DOMContentLoaded', () => {
    const resetButtons = document.querySelectorAll('#reset-demo');
    
    resetButtons.forEach(button => {
      button.addEventListener('click', () => {
        const demoContainer = button.closest('.animation-demo');
        const demoContent = demoContainer?.querySelector('.demo-content');
        
        if (demoContent) {
          // アニメーションをリセットするためにコンテンツを再描画
          const originalContent = demoContent.innerHTML;
          demoContent.innerHTML = '';
          
          // 少し遅延を入れて再描画
          setTimeout(() => {
            demoContent.innerHTML = originalContent;
            
            // イベントリスナーの再アタッチが必要な場合は、カスタムイベントを発火
            demoContent.dispatchEvent(new CustomEvent('demo-reset'));
          }, 10);
        }
      });
    });
  });
</script>
