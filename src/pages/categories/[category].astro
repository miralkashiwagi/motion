---
import Layout from '../../layouts/Layout.astro';
import AnimationCard from '../../components/AnimationCard.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allAnimations = await getCollection('animations');
  
  // カテゴリの一覧を取得
  const categories = [...new Set(allAnimations.map(animation => animation.data.category))];
  
  // カテゴリごとのページを生成
  return categories.map(category => {
    const categoryId = category.toLowerCase().replace(/\s+/g, '-');
    const categoryAnimations = allAnimations.filter(animation => 
      animation.data.category.toLowerCase() === category.toLowerCase()
    );
    
    return {
      params: { category: categoryId },
      props: { category, animations: categoryAnimations }
    };
  });
}

// カテゴリ情報のマッピング
const categoryInfo = {
  'ホバーエフェクト': {
    description: 'マウスホバー時のインタラクティブなアニメーション効果のコレクション。ボタン、カード、テキストなどの要素に適用できる様々なエフェクトを紹介します。',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15.042 21.672 13.684 16.6m0 0-2.51 2.225.569-9.47 5.227 7.917-3.286-.672Zm-7.518-.267A8.25 8.25 0 1 1 20.25 10.5M8.288 14.212A5.25 5.25 0 1 1 17.25 10.5" />
    </svg>`
  },
  'スクロールアニメーション': {
    description: 'スクロールに連動した表示効果とパララックス効果のコレクション。ページのスクロールに応じて要素を表示したり、動かしたりする様々な手法を紹介します。',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 5.25l-7.5 7.5-7.5-7.5m15 6l-7.5 7.5-7.5-7.5" />
    </svg>`
  },
  'テキストアニメーション': {
    description: '文字の動きとタイピング効果のコレクション。テキストを魅力的に表示するための様々なアニメーション技術を紹介します。',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" />
    </svg>`
  },
  'ページトランジション': {
    description: 'ページ間の滑らかな遷移効果のコレクション。ページの切り替えをスムーズに行うための様々なアニメーション技術を紹介します。',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M7.5 21 3 16.5m0 0L7.5 12M3 16.5h13.5m0-13.5L21 7.5m0 0L16.5 12M21 7.5H7.5" />
    </svg>`
  },
  'ローディングアニメーション': {
    description: '読み込み中の表示とスケルトンUIのコレクション。ユーザーに読み込み状態を伝えるための様々なアニメーション技術を紹介します。',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" />
    </svg>`
  },
  'メニュー展開効果': {
    description: 'ナビゲーションメニューの開閉アニメーションのコレクション。ハンバーガーメニューやドロップダウンメニューなどの様々な実装方法を紹介します。',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
    </svg>`
  }
};

const { category, animations } = Astro.props;
const info = categoryInfo[category] || {
  description: `${category}に関するアニメーション技術のコレクション。`,
  icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
    <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 001.423 1.423l1.183.394-1.183.394a2.25 2.25 0 00-1.423 1.423z" />
  </svg>`
};

// アニメーションを難易度でソート
const sortedAnimations = [...animations].sort((a, b) => {
  const difficultyOrder = { beginner: 1, intermediate: 2, advanced: 3 };
  const aDifficulty = a.data.difficulty ? difficultyOrder[a.data.difficulty] : 0;
  const bDifficulty = b.data.difficulty ? difficultyOrder[b.data.difficulty] : 0;
  return aDifficulty - bDifficulty;
});
---

<Layout title={category}>
  <div class="max-w-7xl mx-auto">
    <nav class="flex mb-6 text-sm text-gray-600 dark:text-gray-400">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href="/" class="inline-flex items-center hover:text-indigo-600 dark:hover:text-indigo-400">
            <svg class="w-3 h-3 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
            </svg>
            ホーム
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <a href="/categories" class="ml-1 hover:text-indigo-600 dark:hover:text-indigo-400">カテゴリ</a>
          </div>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <span class="ml-1 font-medium text-gray-800 dark:text-gray-300">{category}</span>
          </div>
        </li>
      </ol>
    </nav>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
      <div class="flex items-center mb-4">
        <div class="w-12 h-12 flex items-center justify-center rounded-full bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400 mr-4" set:html={info.icon} />
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{category}</h1>
      </div>
      <p class="text-gray-600 dark:text-gray-400">{info.description}</p>
    </div>

    {sortedAnimations.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {sortedAnimations.map(animation => (
          <AnimationCard animation={animation} />
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-600 dark:text-gray-400">このカテゴリにはまだアニメーションが追加されていません。</p>
      </div>
    )}
  </div>
</Layout>
