---
import Layout from '../../layouts/Layout.astro';
import AnimationCard from '../../components/AnimationCard.astro';
import SubCategoryList from '../../components/SubCategoryList.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getCategoryInfo } from '../../utils/categoryUtils';
import type { CategoryId } from '../../utils/categoryUtils';

export async function getStaticPaths() {
  const categories: CategoryId[] = [
    'interactive-animations',
    'menu-animations',
    'scroll-animations',
    'text-animations',
    'page-animations',
    'others'
  ];
  
  return categories.map(category => ({
    params: { category },
    props: { category },
  }));
}

interface Props {
  category: CategoryId;
}

const { category } = Astro.props;
const { categoryId } = Astro.props;

// カテゴリ情報を取得
const info = getCategoryInfo(category);

// アニメーションを取得
const allAnimations: CollectionEntry<'animations'>[] = await getCollection('animations');

// カテゴリに基づいてアニメーションをフィルタリング
const categoryAnimations = allAnimations.filter(animation => {
  // カテゴリIDに基づいてフィルタリング
  if (categoryId === 'interactive-animations') {
    return ['ホバーエフェクト', 'ボタンエフェクト', 'カードエフェクト'].includes(animation.data.category);
  } else if (categoryId === 'menu-animations') {
    return ['ハンバーガーメニュー', 'ドロップダウン', 'メガメニュー'].includes(animation.data.category);
  } else if (categoryId === 'scroll-animations') {
    return ['スクロールトリガー', 'パララックス'].includes(animation.data.category);
  } else if (categoryId === 'text-animations') {
    return ['タイピングエフェクト', 'テキストエフェクト'].includes(animation.data.category);
  } else if (categoryId === 'page-animations') {
    return ['ローディングアニメーション', 'ページトランジション'].includes(animation.data.category);
  } else if (categoryId === 'others') {
    return ['特殊効果'].includes(animation.data.category);
  }
  return false;
});

// 日付順にソート（降順）
const sortedAnimations = [...categoryAnimations].sort((a, b) => {
  const dateA = a.data.pubDate || new Date(0);
  const dateB = b.data.pubDate || new Date(0);
  return dateB.getTime() - dateA.getTime(); // 降順（新しい順）
});

---

<Layout title={category}>
  <div class="max-w-7xl mx-auto">
    <nav class="flex mb-6 text-sm text-gray-600 dark:text-gray-400">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href="/" class="inline-flex items-center hover:text-indigo-600 dark:hover:text-indigo-400">
            <svg class="w-3 h-3 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
            </svg>
            ホーム
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <a href="/categories" class="ml-1 hover:text-indigo-600 dark:hover:text-indigo-400">カテゴリ</a>
          </div>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <span class="ml-1 font-medium text-gray-800 dark:text-gray-300">{category}</span>
          </div>
        </li>
      </ol>
    </nav>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
      <div class="flex items-center mb-4">
        <div class="w-12 h-12 flex items-center justify-center rounded-full bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400 mr-4" set:html={info.icon} />
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{category}</h1>
      </div>
      <p class="text-gray-600 dark:text-gray-400">{info.description}</p>
    </div>

    <!-- サブカテゴリリストを表示 -->
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">このカテゴリに含まれる技術</h2>
    <SubCategoryList category={categoryId} />

    {sortedAnimations.length > 0 ? (
      <div>
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">実装例</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedAnimations.map(animation => (
            <AnimationCard animation={animation} />
          ))}
        </div>
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-600 dark:text-gray-400">このカテゴリにはまだアニメーションが追加されていません。</p>
      </div>
    )}
  </div>
</Layout>
