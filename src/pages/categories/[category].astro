---
import Layout from '../../layouts/Layout.astro';
import AnimationCard from '../../components/AnimationCard.astro';
import SubCategoryList from '../../components/SubCategoryList.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getCategoryInfo, getSubcategories } from '../../utils/categoryUtils';
import type { CategoryId } from '../../utils/categoryUtils';
import { categoryMapping } from '../../content/config';

export async function getStaticPaths() {
  // カテゴリーマッピングからカテゴリーIDを取得
  const categories = Object.values(categoryMapping).map(data => data.id) as CategoryId[];
  
  return categories.map(category => ({
    params: { category },
    props: { category },
  }));
}

interface Props {
  category: CategoryId;
}

const { category } = Astro.props;

// カテゴリー情報を取得
const info = getCategoryInfo(category);

// サブカテゴリー情報を取得
const subcategories = getSubcategories(category);

// 親カテゴリー名を取得（カテゴリーIDから逆引き）
const parentCategoryName = Object.entries(categoryMapping).find(([_, data]) => data.id === category)?.[0] || '';

// 日本語のカテゴリー名を取得（トップのカテゴリーナビと同じ表示にするため）
const japaneseCategory = parentCategoryName;

// カテゴリーに属するアニメーションを取得
const allAnimations = await getCollection('animations');
const categoryAnimations = allAnimations.filter(animation => {
  return animation.data.parentCategory === parentCategoryName;
});

// カテゴリー名を正規化する関数
function normalizeCategory(category: string): string {
  return category.trim().toLowerCase();
}

// アニメーションから利用可能なサブカテゴリーを抽出
const availableCategories = new Set<string>();
categoryAnimations.forEach(animation => {
  if (animation.data.category) {
    availableCategories.add(String(animation.data.category));
  }
});

// サブカテゴリー情報を作成（config.tsから取得したものと、アニメーションから抽出したものを組み合わせる）
let effectiveSubcategories = subcategories;

// config.tsから取得したサブカテゴリーが空の場合は、アニメーションから抽出したサブカテゴリーを使用
if (subcategories.length === 0 && availableCategories.size > 0) {
  effectiveSubcategories = Array.from(availableCategories).map(cat => ({
    id: cat.toLowerCase().replace(/\s+/g, '-'),
    name: cat
  }));
}

// サブカテゴリーごとにアニメーションを直接グループ化
interface SubcategoryWithAnimations {
  id: string;
  name: string;
  animations: CollectionEntry<'animations'>[];
}

const animationsBySubcategory: SubcategoryWithAnimations[] = [];

// サブカテゴリーごとにアニメーションを分類
effectiveSubcategories.forEach(subcategory => {
  // サブカテゴリー名に完全一致するアニメーションを抽出（正規化して比較）
  const normalizedSubcategoryName = normalizeCategory(subcategory.name);
  
  const animations = categoryAnimations.filter(animation => {
    const subCat = String(animation.data.category || '');
    const normalizedSubCat = normalizeCategory(subCat);
    const isMatch = normalizedSubCat === normalizedSubcategoryName;
    return isMatch;
  }).sort((a, b) => {
    const dateA = a.data.pubDate || new Date(0);
    const dateB = b.data.pubDate || new Date(0);
    return dateB.getTime() - dateA.getTime();
  });

  // アニメーションがある場合のみ追加
  if (animations.length > 0) {
    animationsBySubcategory.push({
      id: subcategory.id,
      name: subcategory.name,
      animations: animations
    });
  }
});

// サブカテゴリーに分類されなかったアニメーションを「その他」として表示
const uncategorizedAnimations = categoryAnimations.filter(animation => {
  return !effectiveSubcategories.some(subcategory => {
    const subCat = String(animation.data.category || '');
    const normalizedSubCat = normalizeCategory(subCat);
    const normalizedSubcategoryName = normalizeCategory(subcategory.name);
    return normalizedSubCat === normalizedSubcategoryName;
  });
});

// 説明文もTOPのカードと共通にする
const categoryDescription = categoryMapping[parentCategoryName as keyof typeof categoryMapping]?.description || info.description;

---

<Layout title={japaneseCategory}>
  <div class="max-w-7xl mx-auto">

    <header class="mb-10">
      <div class="flex items-center gap-4 mb-4">
        <div class="w-12 h-12 flex items-center justify-center rounded-lg" style={`background-color: ${info.color}20; color: ${info.color};`}>
          <Fragment set:html={info.icon} />
        </div>
        <h1 class="text-3xl font-bold">{japaneseCategory}</h1>
      </div>
      <p class="text-lg text-gray-700 dark:text-gray-300">{categoryDescription}</p>
    </header>

    {effectiveSubcategories.length > 0 && (
      <div class="mb-10">
        <h2 class="text-xl font-semibold mb-4">サブカテゴリー</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {effectiveSubcategories.map((subcategory) => (
            <a 
              href={`#${subcategory.id}`}
              class="p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              <h3 class="font-medium text-lg">{subcategory.name}</h3>
              {subcategory.description && (
                <p class="text-gray-600 dark:text-gray-400 text-sm mt-1">{subcategory.description}</p>
              )}
            </a>
          ))}
        </div>
      </div>
    )}

    {animationsBySubcategory.map((subcategory) => (
      <section id={subcategory.id} class="mb-12">
        <h2 class="text-2xl font-bold mb-6 pb-2 border-b border-gray-200 dark:border-gray-700">
          {subcategory.name}
        </h2>
        {subcategory.animations.length > 0 ? (
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {subcategory.animations.map((animation) => (
              <AnimationCard animation={animation} />
            ))}
          </div>
        ) : (
          <p class="text-gray-500 dark:text-gray-400">このサブカテゴリーにはまだアニメーションがありません。</p>
        )}
      </section>
    ))}

    {categoryAnimations.length === 0 && (
      <div class="text-center py-10">
        <h2 class="text-xl font-medium mb-2">このカテゴリーにはまだアニメーションがありません</h2>
        <p class="text-gray-600 dark:text-gray-400">新しいアニメーションが追加されるのをお待ちください。</p>
      </div>
    )}
  </div>
</Layout>
