---
import Layout from '../../layouts/Layout.astro';
import AnimationCard from '../../components/AnimationCard.astro';
import SubCategoryList from '../../components/SubCategoryList.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getCategoryInfo, getSubcategories, CategoryId } from '../../utils/categoryUtils';
import { categoryMapping } from '../../content/config';

export async function getStaticPaths() {
  // カテゴリーマッピングからカテゴリーIDを取得
  const categories: CategoryId[] = Object.values(categoryMapping).map(data => data.id);
  
  return categories.map(category => ({
    params: { category },
    props: { category },
  }));
}

interface Props {
  category: CategoryId;
}

const { category } = Astro.props;

// カテゴリ情報を取得
const info = getCategoryInfo(category);

// サブカテゴリー情報を取得
const subcategories = getSubcategories(category);

// 親カテゴリー名を取得（カテゴリーIDから逆引き）
const parentCategoryName = Object.entries(categoryMapping).find(([_, data]) => data.id === category)?.[0] || '';

// 日本語のカテゴリー名を取得（トップのカテゴリーナビと同じ表示にするため）
const japaneseCategory = parentCategoryName;

// 説明文もTOPのカードと共通にする
const categoryDescription = categoryMapping[parentCategoryName]?.description || info.description;

// アニメーションを取得
const allAnimations: CollectionEntry<'animations'>[] = await getCollection('animations');

// カテゴリに基づいてアニメーションをフィルタリング
const categoryAnimations = allAnimations.filter(animation => {
  // 親カテゴリー名を取得
  const parentCat = String(animation.data.parentCategory || '');
  
  // カテゴリーIDに基づいて厳密にフィルタリング
  if (category === 'scroll') {
    // スクロールカテゴリーの場合は「スクロール関連」を含むものだけを表示
    return parentCat.includes('スクロール');
  } else if (category === 'menu') {
    // メニューカテゴリーの場合は「メニュー」を含むものだけを表示
    return parentCat.includes('メニュー');
  } else {
    // その他のカテゴリーは親カテゴリー名の部分一致で検索（文字化け対策）
    const isMatch = parentCat.includes(parentCategoryName) || 
                    parentCategoryName.includes(parentCat);
    
    console.log(`${animation.data.title}: "${parentCat}" と "${parentCategoryName}" の比較結果: ${isMatch}`);
    return isMatch;
  }
});

console.log(`フィルタリング後のアニメーション数: ${categoryAnimations.length}`);

// サブカテゴリーごとにアニメーションをグループ化
const animationsBySubcategory = subcategories.map(subcategory => {
  const animations = categoryAnimations.filter(animation => {
    const subCat = String(animation.data.category || '');
    // サブカテゴリー名の部分一致でフィルタリング（文字化け対策）
    const isMatch = subCat.includes(subcategory.name) || subcategory.name.includes(subCat);
    console.log(`サブカテゴリーチェック: ${animation.data.title} - "${subCat}" と "${subcategory.name}" の比較結果: ${isMatch}`);
    return isMatch;
  }).sort((a, b) => {
    const dateA = a.data.pubDate || new Date(0);
    const dateB = b.data.pubDate || new Date(0);
    return dateB.getTime() - dateA.getTime();
  });
  
  console.log(`サブカテゴリー: ${subcategory.name}, アニメーション数: ${animations.length}`);
  
  return {
    ...subcategory,
    animations
  };
});

// サブカテゴリーに分類されなかったアニメーションを「その他」として表示
const uncategorizedAnimations = categoryAnimations.filter(animation => {
  return !subcategories.some(subcategory => {
    const subCat = String(animation.data.category || '');
    return subCat.includes(subcategory.name) || subcategory.name.includes(subCat);
  });
});

// 「その他」のサブカテゴリーがある場合は追加
if (uncategorizedAnimations.length > 0) {
  animationsBySubcategory.push({
    id: 'others',
    name: 'その他',
    animations: uncategorizedAnimations
  });
}

// すべてのアニメーションを表示するセクションを追加
const allAnimationsSection = {
  id: 'all',
  name: 'すべてのアニメーション',
  animations: categoryAnimations
};

---

<Layout title={japaneseCategory}>
  <div class="max-w-7xl mx-auto">
    <nav class="flex mb-6 text-sm text-gray-600 dark:text-gray-400">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href={`${import.meta.env.BASE_URL}/`} class="inline-flex items-center hover:text-primary-600 dark:hover:text-primary-400">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
            </svg>
            ホーム
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
            <span class="ml-1 font-medium text-gray-500 md:ml-2 dark:text-gray-400">{japaneseCategory}</span>
          </div>
        </li>
      </ol>
    </nav>

    <header class="mb-10">
      <div class="flex items-center gap-4 mb-4">
        <div class="w-12 h-12 flex items-center justify-center rounded-lg" style={`background-color: ${info.color}20; color: ${info.color};`}>
          <Fragment set:html={info.icon} />
        </div>
        <h1 class="text-3xl font-bold">{japaneseCategory}</h1>
      </div>
      <p class="text-lg text-gray-700 dark:text-gray-300">{categoryDescription}</p>
    </header>

    {subcategories.length > 0 && (
      <div class="mb-10">
        <h2 class="text-xl font-semibold mb-4">サブカテゴリー</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {subcategories.map((subcategory) => (
            <a 
              href={`#${subcategory.id}`}
              class="p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              <h3 class="font-medium text-lg">{subcategory.name}</h3>
              {subcategory.description && (
                <p class="text-gray-600 dark:text-gray-400 text-sm mt-1">{subcategory.description}</p>
              )}
            </a>
          ))}
        </div>
      </div>
    )}

    {animationsBySubcategory.map((subcategory) => (
      <section id={subcategory.id} class="mb-12">
        <h2 class="text-2xl font-bold mb-6 pb-2 border-b border-gray-200 dark:border-gray-700">
          {subcategory.name}
        </h2>
        {subcategory.animations.length > 0 ? (
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {subcategory.animations.map((animation) => (
              <AnimationCard animation={animation} />
            ))}
          </div>
        ) : (
          <p class="text-gray-500 dark:text-gray-400">このサブカテゴリーにはまだアニメーションがありません。</p>
        )}
      </section>
    ))}



    {categoryAnimations.length === 0 && (
      <div class="text-center py-10">
        <h2 class="text-xl font-medium mb-2">このカテゴリーにはまだアニメーションがありません</h2>
        <p class="text-gray-600 dark:text-gray-400">新しいアニメーションが追加されるのをお待ちください。</p>
      </div>
    )}
  </div>
</Layout>
