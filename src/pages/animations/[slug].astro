---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import AnimationDemo from '../../components/AnimationDemo.astro';
import CodeBlock from '../../components/CodeBlock.astro';

export async function getStaticPaths() {
  const animations = await getCollection('animations');
  return animations.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// 関連アニメーションを取得（同じカテゴリから3つ）
const allAnimations = await getCollection('animations');
const relatedAnimations = allAnimations
  .filter(animation => 
    animation.data.category === entry.data.category && 
    animation.slug !== entry.slug
  )
  .slice(0, 3);

// 難易度のラベルとカラー
const difficultyLabels = {
  beginner: { label: '初級', color: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' },
  intermediate: { label: '中級', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400' },
  advanced: { label: '上級', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400' }
};

const difficulty = entry.data.difficulty ? 
  difficultyLabels[entry.data.difficulty] : 
  { label: '未分類', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400' };
---

<Layout title={entry.data.title}>
  <div class="max-w-7xl mx-auto">
    <nav class="flex mb-6 text-sm text-gray-600 dark:text-gray-400">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href={`${import.meta.env.BASE_URL}/`} class="inline-flex items-center hover:text-indigo-600 dark:hover:text-indigo-400">
            <svg class="w-3 h-3 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
            </svg>
            ホーム
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <a href={`${import.meta.env.BASE_URL}/animations`} class="ml-1 hover:text-indigo-600 dark:hover:text-indigo-400">アニメーション</a>
          </div>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg class="w-3 h-3 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <span class="ml-1 font-medium text-gray-800 dark:text-gray-300">{entry.data.title}</span>
          </div>
        </li>
      </ol>
    </nav>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <div class="p-6">
        <div class="flex flex-wrap items-center gap-2 mb-4">
          <a 
            href={`${import.meta.env.BASE_URL}/categories/${entry.data.category.toLowerCase().replace(/\s+/g, '-')}`} 
            class="inline-flex items-center px-3 py-1 rounded-full bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-400 text-xs font-medium"
          >
            {entry.data.category}
          </a>
          <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${difficulty.color}`}>
            {difficulty.label}
          </span>
          {entry.data.tags && entry.data.tags.map(tag => (
            <span class="inline-flex items-center px-3 py-1 rounded-full bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 text-xs font-medium">
              {tag}
            </span>
          ))}
        </div>
        
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">{entry.data.title}</h1>
        
        <p class="text-gray-600 dark:text-gray-400 mb-6">{entry.data.description}</p>
        
        {entry.data.image && (
          <img 
            src={entry.data.image} 
            alt={entry.data.title} 
            class="w-full h-auto rounded-lg mb-6 object-cover"
          />
        )}
        
        <div class="flex flex-wrap gap-4 mb-6">
          {entry.data.libraries && entry.data.libraries.map(lib => (
            <div class="flex items-center">
              <span class="text-gray-600 dark:text-gray-400 text-sm">{lib}</span>
            </div>
          ))}
        </div>
      </div>
      
      <div class="border-t border-gray-200 dark:border-gray-700">
        <div class="p-6">
          <div class="prose dark:prose-invert max-w-none">
            <Content />
          </div>
        </div>
      </div>
    </div>
    
    {relatedAnimations.length > 0 && (
      <div class="mt-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">関連アニメーション</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {relatedAnimations.map(animation => (
            <a href={`${import.meta.env.BASE_URL}/animations/${animation.slug}`} class="block">
              <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                {animation.data.image && (
                  <img 
                    src={animation.data.image} 
                    alt={animation.data.title} 
                    class="w-full h-40 object-cover"
                  />
                )}
                <div class="p-4">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{animation.data.title}</h3>
                  <p class="text-gray-600 dark:text-gray-400 text-sm line-clamp-2">{animation.data.description}</p>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    )}
  </div>
</Layout>

<style is:global>
  /* Markdown コンテンツの見出しスタイル */
  .prose h2 {
    font-size: 1.75rem;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: #1f2937;
    line-height: 1.3;
    position: relative;
    padding-bottom: 0.5rem;
  }
  
  .prose h2::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 4rem;
    height: 2px;
    background-color: #4f46e5;
  }
  
  .prose h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: #1f2937;
    line-height: 1.4;
    position: relative;
    padding-left: 1rem;
  }
  
  .prose h3::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0.25rem;
    bottom: 0.25rem;
    width: 4px;
    background-color: #4f46e5;
    border-radius: 2px;
  }
  
  /* ダークモード対応 */
  .dark .prose h2 {
    color: #f3f4f6;
  }
  
  .dark .prose h2::after {
    background-color: #818cf8;
  }
  
  .dark .prose h3 {
    color: #f3f4f6;
  }
  
  .dark .prose h3::before {
    background-color: #818cf8;
  }
</style>
